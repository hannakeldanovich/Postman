{
	"info": {
		"_postman_id": "cb8d8c45-7daa-41a0-a918-d546bc6ceb3c",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26853463"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var resp_json = pm.response.json();\r",
							"var resp_name = resp_json.name;\r",
							"var resp_age = resp_json.age;\r",
							"var resp_salary = resp_json.salary;\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"resp_name_check\", function () {\r",
							"    pm.expect(resp_name).to.eql(\"Hanna\");\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"resp_age_check\", function () {\r",
							"    pm.expect(resp_age).to.eql(\"25\");\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"resp_salary_check\", function () {\r",
							"    pm.expect(resp_salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// Спарсить request.\r",
							"var req = request.data;\r",
							"\r",
							"var req_name = req.name;\r",
							"var req_age = req.age;\r",
							"var req_salary = +req.salary;\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"req_name_check\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"req_age_check\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"req_salary_check\", function () {\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response\r",
							"var resp_family = resp_json.family;\r",
							"console.log(\"Resp_family = \", resp_family);\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"var resp_u_salary_1_5_year = resp_json.family.u_salary_1_5_year;\r",
							"\r",
							"pm.test(\"u_salary_1_5_check\", function () {\r",
							"    pm.expect(resp_u_salary_1_5_year).to.eql(req_salary*4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Hanna",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"var resp_json = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var resp_name = resp_json.name;\r",
							"var req_name = req.name;\r",
							"pm.test(\"name_check\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"var resp_age = resp_json.age;\r",
							"var req_age = req.age;\r",
							"pm.test(\"age_check\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var resp_salary = resp_json.salary;\r",
							"var req_salary = +req.salary;\r",
							"pm.test(\"salary_check\", function () {\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"var resp_family = resp_json.family;\r",
							"console.log(\"Resp_family = \", resp_family);\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"var resp_dog = resp_json.family.pets.dog;\r",
							"console.log (\"Dog =\", resp_dog);\r",
							"\r",
							"pm.test(\"dog_name_check\", function () {\r",
							"    pm.expect(resp_dog).hasOwnProperty('name');\r",
							"});\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog_age_check\", function () {\r",
							"    pm.expect(resp_dog).hasOwnProperty('age');\r",
							"});\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"var resp_dog_name = resp_json.family.pets.dog.name;\r",
							"pm.test(\"dog_luky\", function () {\r",
							"    pm.expect(resp_dog_name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"var resp_dog_age = resp_json.family.pets.dog.age;\r",
							"pm.test(\"dog_age_4\", function () {\r",
							"    pm.expect(resp_dog_age).to.eql(4);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Hanna&age=25&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Hanna"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"var resp_json = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var resp_name = resp_json.name;\r",
							"var req_name = req.name;\r",
							"pm.test(\"name_check\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"var resp_age = resp_json.age;\r",
							"var req_age = +req.age;\r",
							"pm.test(\"age_check\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"console.log(\"Salary_req = \", req.salary);\r",
							"\r",
							"// Вывести в консоль параметр salary из response.\r",
							"console.log(\"Salary_resp = \", resp_json.salary);\r",
							"\r",
							"var salary_0 = resp_json.salary[0];\r",
							"var salary_1 = resp_json.salary[1];\r",
							"var salary_2 = resp_json.salary[2];\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"Salary_resp_0 = \", salary_0);\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Salary_resp_1 = \", salary_1);\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Salary_resp_2 = \", salary_2);\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"var req_salary = +req.salary;\r",
							"pm.test(\"salary_0_check\", function () {\r",
							"    pm.expect(salary_0).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary_1_check\", function () {\r",
							"    pm.expect(+salary_1).to.eql(req_salary*2);\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary_2_check\", function () {\r",
							"    pm.expect(+salary_2).to.eql(req_salary*3);\r",
							"});\r",
							"\r",
							"// Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", resp_name);\r",
							"// Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", resp_age);\r",
							"// Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", salary_0);\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var salary_ar = resp_json.salary;\r",
							"for (let i = 0; i < salary_ar.length; i += 1) {\r",
							"  console.log(salary_ar[i]);\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Hanna&age=25&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Hanna"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"var resp_json = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"var req = request.data;\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"resp_check_0\", function () {\r",
							"    pm.expect(resp_json).hasOwnProperty('start_qa_salary');\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"resp_check_1\", function () {\r",
							"    pm.expect(resp_json).hasOwnProperty('qa_salary_after_6_months');\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"resp_check_2\", function () {\r",
							"    pm.expect(resp_json).hasOwnProperty('qa_salary_after_12_months');\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"resp_check_3\", function () {\r",
							"    pm.expect(resp_json).hasOwnProperty('qa_salary_after_1.5_year');\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"resp_check_4\", function () {\r",
							"    pm.expect(resp_json).hasOwnProperty('qa_salary_after_3.5_years');\r",
							"});\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"resp_check_5\", function () {\r",
							"    pm.expect(resp_json).hasOwnProperty('person');\r",
							"});\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"var resp_start = resp_json.start_qa_salary;\r",
							"var req_salary = +req.salary;\r",
							"pm.test(\"start_check\", function () {\r",
							"    pm.expect(resp_start).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"var resp_6 = resp_json.qa_salary_after_6_months;\r",
							"pm.test(\"6_check\", function () {\r",
							"    pm.expect(resp_6).to.eql(req_salary*2);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"var resp_12 = resp_json.qa_salary_after_12_months;\r",
							"pm.test(\"12_check\", function () {\r",
							"    pm.expect(resp_12).to.eql(req_salary*2.7);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"var resp_1_5 = resp_json[\"qa_salary_after_1.5_year\"];\r",
							"pm.test(\"1_5_check\", function () {\r",
							"    pm.expect(resp_1_5).to.eql(req_salary*3.3);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"var resp_3_5 = resp_json[\"qa_salary_after_3.5_years\"];\r",
							"pm.test(\"3_5_check\", function () {\r",
							"    pm.expect(resp_3_5).to.eql(req_salary*3.8);\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"var sal_0 = resp_json.person.u_name[1];\r",
							"pm.test(\"sal_0_check\", function () {\r",
							"    pm.expect(sal_0).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"var u_age = resp_json.person.u_age;\r",
							"var req_age = +req.age;\r",
							"pm.test(\"u_age_check\", function () {\r",
							"    pm.expect(u_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"var sal_5 = resp_json.person.u_salary_5_years;\r",
							"pm.test(\"salary_5_check\", function () {\r",
							"    pm.expect(sal_5).to.eql(req_salary*4.2);\r",
							"});\r",
							"\r",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"var pers = (Object.keys(resp_json.person));\r",
							"for(x = 0; x < 3; x = x + 1) {\r",
							"    console.log(pers[x])\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Hanna",
							"disabled": true
						},
						{
							"key": "age",
							"value": "25",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}